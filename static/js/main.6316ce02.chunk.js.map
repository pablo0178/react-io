{"version":3,"sources":["component/Navbar.tsx","component/TaskForm.tsx","component/TaskList.tsx","pages/TaskPage.tsx","pages/AbouPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","to","TaskForm","props","ref","useRef","type","id","placeholder","onKeyPress","event","key","onAdd","current","value","htmlFor","TaskList","todo","length","map","classes","completed","push","join","checked","onChange","onToggle","bind","title","onClick","onRemove","TodoPage","useState","setTodo","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","Fragment","newTodo","Date","now","prev","filter","AboutPage","history","useHistory","App","component","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAGaA,EAAkC,WAC3C,OACI,6BACI,yBAAKC,UAAU,mCACf,kBAAC,IAAD,CAASC,GAAG,YAAYD,UAAU,cAAlC,oBACA,wBAAIA,UAAU,8BACV,4BAAI,kBAAC,IAAD,CAASC,GAAG,aAAZ,4DACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,UAAZ,kC,+BCJPC,EAAoC,SAACC,GAE9C,IAAMC,EAAMC,iBAAyB,MASrC,OACI,yBAAKL,UAAU,mBACX,2BACII,IAAKA,EACLE,KAAK,OACLC,GAAG,QACHC,YAAY,mIACZC,WAdY,SAACC,GACJ,UAAbA,EAAMC,MACNR,EAAMS,MAAMR,EAAIS,QAASC,OACzBV,EAAIS,QAASC,MAAQ,OAYrB,2BAAOC,QAAQ,QAAQf,UAAU,UAAjC,sICfCgB,EAAoC,SAACb,GAC9C,OAA0B,IAAtBA,EAAMc,KAAKC,OACJ,uBAAGlB,UAAU,UAAb,mEAEP,4BACKG,EAAMc,KAAKE,KAAI,SAAAF,GACZ,IAAMG,EAAU,CAAC,QAKjB,OAJIH,EAAKI,WACLD,EAAQE,KAAK,aAIb,wBAAItB,UAAWoB,EAAQG,KAAK,KAAMZ,IAAKM,EAAKV,IACxC,+BACI,2BAAOD,KAAK,WACLkB,QAASP,EAAKI,UACdI,SAAUtB,EAAMuB,SAASC,KAAK,KAAMV,EAAKV,MAEhD,8BAAOU,EAAKW,OACZ,uBAAG5B,UAAU,0BACb6B,QAAS,kBAAM1B,EAAM2B,SAASb,EAAKV,MADnC,iBCvBfwB,EAAqB,WAAO,IAAD,EAEbC,mBAAkB,IAFL,mBAE7Bf,EAF6B,KAExBgB,EAFwB,KAIpCC,qBAAU,WACR,IAAMC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,SAAW,MAEzDN,EAAQE,KACR,IAEFD,qBAAU,WACRI,aAAaE,QAAQ,OAAQJ,KAAKK,UAAUxB,OA8B9C,OACI,kBAAC,IAAMyB,SAAP,KACI,kBAAC,EAAD,CAAU9B,MA7BC,SAACgB,GAClB,IAAMe,EAAiB,CACrBf,MAAOA,EACPrB,GAAIqC,KAAKC,MACTxB,WAAW,GAEbY,GAAQ,SAAAa,GAAI,OAAKH,GAAL,mBAAiBG,UAyBvB,kBAAC,EAAD,CAAU7B,KAAMA,EACNa,SAVI,SAACvB,GACrB0B,GAAQ,SAAAa,GAAI,OAAIA,EAAKC,QAAO,SAAA9B,GAAI,OAAIA,EAAKV,KAAOA,SAUhCmB,SAxBI,SAACnB,GACrB0B,GAAQ,SAAAa,GAAI,OACVA,EAAK3B,KAAI,SAAAF,GACT,OAAIA,EAAKV,KAAOA,EACP,2BACFU,GADL,IAEEI,WAAYJ,EAAKI,YAGdJ,aCnCF+B,EAAsB,WAC/B,IAAMC,EAAUC,cAChB,OACI,oCACI,gDACA,4BAAQlD,UAAU,MAAM6B,QAAS,kBAAMoB,EAAQ3B,KAAK,eAApD,+GCeG6B,EAjBO,WAIpB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAKnD,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoD,UAAWrB,EAAUsB,KAAK,YAAYC,OAAK,IAClD,kBAAC,IAAD,CAAOF,UAAWJ,EAAWK,KAAK,eCJxBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6316ce02.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const Navbar: React.FunctionComponent = () => {\n    return (\n        <nav>\n            <div className=\"nav-wrapper purple darken-3 px1\">\n            <NavLink to=\"/react-io\" className=\"brand-logo\">React+Typescript</NavLink>\n            <ul className=\"right hide-on-med-and-down\">\n                <li><NavLink to=\"/react-io\">Список дел</NavLink></li>\n                <li><NavLink to=\"/about\">О нас</NavLink></li>\n            </ul>\n            </div>\n        </nav>\n    );\n}","import React, { useRef } from 'react';\n\ninterface TaskFormProps {\n    onAdd(title: string): void\n}\n\nexport const TaskForm: React.FC<TaskFormProps> = (props) => {\n\n    const ref = useRef<HTMLInputElement>(null)\n\n    const keyPressHandler = (event: React.KeyboardEvent) => {\n        if (event.key ===\"Enter\") {\n            props.onAdd(ref.current!.value)\n            ref.current!.value = ''\n        }\n    }\n\n    return (\n        <div className=\"input-field mt2\">\n            <input\n                ref={ref}\n                type=\"text\" \n                id=\"title\" \n                placeholder=\"Введите название задачи\" \n                onKeyPress={keyPressHandler} />\n            <label htmlFor=\"title\" className=\"active\">Введите название задачи</label>\n        </div>\n    )\n}","import React from 'react'\nimport { ITodo } from '../interfaces'\n\n\ntype TaskListProps = {\n    todo: ITodo[]\n    onToggle(id: number): void\n    onRemove(id: number): void\n}\n\nexport const TaskList: React.FC<TaskListProps> = (props) => {\n    if (props.todo.length === 0) {\n        return <p className=\"center\">Пока дел нет!</p>    }\n    return (\n        <ul>\n            {props.todo.map(todo => {\n                const classes = ['todo']\n                if (todo.completed) {\n                    classes.push('completed')\n                }\n\n                return (\n                    <li className={classes.join(' ')} key={todo.id}>\n                        <label>\n                            <input type=\"checkbox\" \n                                   checked={todo.completed}\n                                   onChange={props.onToggle.bind(null, todo.id)}\n                            />\n                            <span>{todo.title}</span>\n                            <i className=\"material-icons red-text\"\n                            onClick={() => props.onRemove(todo.id)}\n                            >delete</i>\n                        </label>\n                    </li>\n                )\n            })}\n            \n        </ul>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport { TaskForm } from '../component/TaskForm';\nimport { TaskList } from '../component/TaskList';\nimport { ITodo } from '../interfaces';\n\n\nexport const TodoPage: React.FC = () => {\n\n    const [todo,setTodo] = useState<ITodo[]>([])\n\n    useEffect(() => {\n      const saved = JSON.parse(localStorage.getItem('todo') || '[]') as ITodo[]\n  \n      setTodo(saved)\n    },[])\n  \n    useEffect(() => {\n      localStorage.setItem('todo', JSON.stringify(todo))\n    })\n  \n    const addHandler = (title: string) => {\n      const newTodo: ITodo = {\n        title: title,\n        id: Date.now(),\n        completed: false\n      }\n      setTodo(prev => [newTodo, ...prev])\n    }\n  \n    const toggleHandler = (id: number) => {\n      setTodo(prev =>\n        prev.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          }\n        }\n        return todo\n      }))\n    }\n  \n    const removeHandler = (id: number) => {\n      setTodo(prev => prev.filter(todo => todo.id !== id\n      ))\n    }\n\n    return (\n        <React.Fragment>\n            <TaskForm onAdd={addHandler} />\n\n            <TaskList todo={todo} \n                      onRemove={removeHandler} \n                      onToggle={toggleHandler} />\n\n\n        </React.Fragment>\n    )\n    \n\n \n\n    \n}","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nexport const AboutPage: React.FC = () => {\n    const history = useHistory()\n    return (\n        <>\n            <h1>Information Page</h1>\n            <button className='btn' onClick={() => history.push('/react-io')}>\n                Обратно к списку дел\n            </button>\n        </>\n    )\n}","import React from 'react';\nimport { Navbar } from './component/Navbar';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom'\nimport { TodoPage } from './pages/TaskPage';\nimport { AboutPage } from './pages/AbouPage';\n\nconst App: React.FC = () => {\n\n  \n  \n  return (\n    <BrowserRouter>\n      <Navbar />\n      <div className=\"container\">\n        <Switch>\n          <Route component={TodoPage} path='/react-io' exact />\n          <Route component={AboutPage} path='/about' />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}